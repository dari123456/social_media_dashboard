# backend/bots/step2_decomposition.py
import re

def extract_conclusions_from_summary(summary_text: str) -> list[str]:
    """
    Parses a summary text generated by the AI using explicit [CONCLUSION] tags.
    This is more robust than relying on natural language formatting.

    Args:
        summary_text: The full text of the AI-generated summary.

    Returns:
        A list of strings, where each string is a clean conclusion text.
    """
    if not summary_text or not isinstance(summary_text, str):
        return []

    print("--- Starting Step 2: Extracting Conclusions (Tag-Based) ---")

    # This new regex looks for anything between [CONCLUSION] and [/CONCLUSION]
    pattern = re.compile(r"\[CONCLUSION\](.*?)\[/CONCLUSION\]", re.DOTALL | re.IGNORECASE)
    
    matches = pattern.findall(summary_text)

    # Clean up any whitespace from the results
    extracted_conclusions = [match.strip() for match in matches]

    if extracted_conclusions:
        print(f"  - Found {len(extracted_conclusions)} conclusions.")
        for conc in extracted_conclusions:
            print(f"    - {conc[:80]}...")
    else:
        print("  - WARNING: No conclusions could be extracted. Check the AI's output format.")

    return extracted_conclusions